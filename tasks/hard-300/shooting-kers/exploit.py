#!/usr/bin/env python3

import re
import networkx as nx
import matplotlib.pyplot as plt

from html import unescape
from urllib.parse import unquote


def extract_rows(html):
    tags = re.findall(r'<pre>(.*?)</pre>', html)
    tags = list(map(unquote, map(unescape, tags)))
    row_size = 10
    return [tags[i:i+row_size] for i in range(0, len(tags), row_size)]


def build_graph(rows):
    g = nx.Graph()
    idx = -1
    edge_labels = {}
    current_cases = []
    current_state = None
    passed_jump = 0
    while idx < len(rows) - 1:
        idx += 1
        row = rows[idx]
        if row[5] == 'POST_INC':
            passed_jump = 0
            current_state = row[1].replace('*', '') 
            g.add_node(current_state)
            continue
        if row[5] in ['FETCH_DIM_R', 'JMPNZ']:
            continue
        if row[5] == 'CASE':
            case = re.search(r'\'(.)\'', row[9]).group(1)
            current_cases.append(case)
            continue
        if row[5] == 'JMP':
            if passed_jump == 0:
                passed_jump = 1
            else:
                if len(current_cases) == 0:
                    continue
                new_state = re.search(r'->(\d+)', row[9]).group(1)
                g.add_edge(current_state, new_state)
                edge_labels[(current_state, new_state)] = current_cases.pop(0)
                continue
    return g, edge_labels


def main():
    html = open('service/dump.html', 'r').read()
    rows = extract_rows(html)[11:-2]
    g, edge_labels = build_graph(rows)    
    in_state = '2325'
    out_state = '4121'
    fail_state = '4122'
    path = nx.bidirectional_shortest_path(g, in_state, out_state)
    flag = ''.join(edge_labels[(x, y)] for x, y in zip(path, path[1:]))
    print(flag)


if __name__ == '__main__':
    main()
